##Tags: OOPS, C#

What are Constructors ?
  A constructor is a special method of the class which gets automatically invoked whenever an instance of the class is created.
  Constructors are used to initialize the member(s) of a class. They are invoked immediately and as soon as instance of the class is created. 
      * A Constructor must have the same name as the class.
      * A constructor doesnâ€™t have any return type, not even void.
      * A class can have any number of constructors.
      * Access modifiers can be used in constructor declaration to control its access i.e which other class can call the constructor.
      
      
      class MyFirstClass{
        int x;
        // 0 argument constructor
        MyFirstClass(){
          x =10;
        }
        
        //1 argument consructor
        MyFirstClass(int z){
          x = 10*z;
        }
      }
      
      class MyOtherClass{
        static void Main(string[] args){
          MyFirstClass obj = new MyFirstClass();   // This will call 0 arg constructor and x will be initialized with 10.
          MyFirstClass obj1 = new MyFirstClass(2); // This will call 1 arg constructor and x will be initialized with 20.
        }
      }

Types Of Constructors:
  1- Instance Constructors: 
            Constructors are of this type by default. This type of constructor triggers every time an instance of the class is 
            created and are used to initialize non-static members of the class. This type of construcotrs could be non-parameterized 
            (AKA default) or parameterized.    
            
  2- Static Constructors: 
            Static constructors are used to initializing the static members of the class and implicitly called with the execution 
            of the class. you do not need to initialze a class to call them.
            R: Static Constructors can only be called once in the life cycle of a class execution.
            * Within a class, you can create only one static constructor.
            * A static constructor cannot be a parameterized constructor.
      
Enough talk.... Now time to see it working:
 
Constructor Lab1:

using System;

namespace Constructor
{
    class ConstrLab1
    {
        //Instance Constructor
        ConstrLab1()
        {
            Console.WriteLine("Calling Instance Constructor.");
        }

        //Static Constructor
        static ConstrLab1()
        {
            Console.WriteLine("Calling Static Constructor.");
        }

        static void Main(string[] args)
        {
            ConstrLab1 obj1 = new ConstrLab1();
            ConstrLab1 obj2 = new ConstrLab1();
            Console.ReadKey();
        }
    }
}


Output: 
Calling Static Constructor.
Calling Instance Constructor.
Calling Instance Constructor.

Explanation of the Output:

Since we created 2 instance of the Class, hence 2 times instance constuctor was called, and as we learned static constructor 
executed only once per execution hence it is printed only once. Static Construtor executes first before any other code is 
executed, so it prints first. 


Can we Inherit a Constructor ?

No, we can not inherit the constructor. C# allows base and derived class to have their own constructors. A class is allowed to inherit all members of the class but not 
the constructor, because the constructor is not the member of the class. 

But, we can call the constructor of base class from the derived class. If you provide the constructor in the derived class, you must provide an appropriate constructor in the base class. 
If you have provided a constructor in the derived class and no constructor in the base class, the compiler will throw an error.

Now, When you instantiate the derived class, then first, default constructor of base class executes (automatically) and then the constructor
of derived class executes. so, the default constructor of base class can be called by calling the derived class's constructor(instantiate the derived class).

What if I have parameterized constructor in base class which i want to call from derived class ? yes, this is doable with keyword
'base'. you can call parameterized construcotr of base class from the derived class.let take an example

Constructor Lab2:

using System;

namespace Constructor
{
    class ConstrLab2Base
    {
        //Instance Constructor
        ConstrLab2Base()
        {
            Console.WriteLine("Calling base class's default Constructor.");
        }
        
        ConstrLab2Base(int x)
        {
            Console.WriteLine("Calling base class's parameterized Constructor.");
        }
    }
    
    class ConstrLab2Derived : ConstrLab2Base{
        ConstrLab2Derived(): base(a){
            Console.WriteLine("Calling derived class's Constructor.");
        }
    }
       static void Main(string[] args)
        {
            ConstrLab2Derived obj1 = new ConstrLab2Derived();
            Console.ReadKey();
        }
    }
}

Output: 
Calling base class's parameterized Constructor.
Calling derived class's Constructor.



